--This file shows a table with over +9000 rows of data
--RDBMS used: MySQL
--Dataset location: https://www.kaggle.com/datasets/vivek468/superstore-dataset-final

------------------------
 Create table for import
------------------------

CREATE TABLE superstore_dataset (
	RowID INT PRIMARY KEY,
    OrderID VARCHAR(20),
    OrderDate VARCHAR(20),
    ShipDate VARCHAR(20),
    ShipMode TEXT,
    CustomerID VARCHAR(10),
    CustomerName TEXT,
    CustomerType TEXT,
    Country TEXT,
    City TEXT,
    State TEXT,
    PostalCode INT,
    Region TEXT,
    ProductID VARCHAR(30),
    Category TEXT,
    SubCategory TEXT,
    ProductName VARCHAR(100),
    Sales DECIMAL(10,2),
    Quantity INT,
    Discount DECIMAL(10,2),
    Profit DECIMAL(10,2)
    )


1.
--------------------------
Top 10 Customers by Profit
--------------------------

-- Find the top 10 customers with the highest profit margin gained by the store.

SELECT
    CustomerName,
    SUM(Profit) AS TotalProfitMargin
FROM superstore_dataset
GROUP BY CustomerName
ORDER BY TotalProfitMargin DESC
LIMIT 10

--------------------------

Explanation:
- This query retrieves the top 10 customer names and their total profits from the "superstore_dataset."
- Results are grouped by customer name.
- The results are sorted in descending order of total profit to identify the top-performing customers.
- The LIMIT clause ensures that only the top 10 results are displayed.

----------
Result-Set
-----------------------------------------
CustomerName         | TotalProfitMargin
-----------------------------------------
Tamara Chand          | 8964.48
Raymond Buch          | 6976.09
Sanjit Chand          | 5757.42
Hunter Lopez          | 5622.43
Adrian Barton         | 5438.91
Tom Ashbrook          | 4703.80
Christopher Martinez  | 3899.91
Keith Dawkins         | 3038.58
Andy Reiter           | 2884.61
Daniel Raglin         | 2869.08

------------------------------------------


2.
--------------------------
Weekday vs. Weekend Orders
--------------------------

-- Categorize orders as "Weekday" or "Weekend" based on OrderDate and calculate the average sales for each category.

SELECT
    WeekEndOrDay,
    AvgSales
FROM (
    SELECT
        CASE
            WHEN DAYOFWEEK(OrderDate) IN (1, 7) THEN 'Weekend'
            ELSE 'Weekday'
        END AS WeekEndOrDay,
        AVG(Sales) AS AvgSales
    FROM superstore_dataset
    GROUP BY WeekEndOrDay
) AS EndOrDayTable

--------------------------

Explanation:
- This query categorizes orders from the "superstore_dataset" as either "Weekday" or "Weekend" based on the OrderDate column.
- It calculates the average sales (AvgSales) for each category, providing insights into the average sales on weekdays compared to weekends.
- The inner subquery uses the CASE expression to categorize orders.
- The outer query retrieves the results with the appropriate column aliases.

-------------------------
Result-Set
--------------------------------
WeekEndOrDay   | AvgSales
--------------------------------
Weekday   | 239.388512
Weekend   | 224.845025
--------------------------------


3.
--------------------------------------
Profit Percentage Calculation
--------------------------------------

-- Calculate the profit percentage for each order by rounding it to the nearest whole number and representing it as a percentage.

SELECT
    RowID,
    Sales,
    Profit,
    CONCAT(ROUND((Profit/Sales)*100,0),'%') AS Profit_Percentage
FROM superstore_dataset;

--------------------------------------

Explanation:
- In this query, we calculate the profit percentage for each order in the "superstore_dataset."
- We use the formula (Profit / Sales) * 100 to calculate the profit percentage. This formula calculates the profit as a percentage of the sales amount for each order.
- The ROUND function is used to round the calculated percentage to the nearest whole number.
- We use the CONCAT function to concatenate the rounded percentage value with the '%' symbol to represent it as a percentage.
- The result set includes the RowID, Sales, Profit, and Profit_Percentage columns.

------------------------
Result Set - Has over 9000 rows, so only showing the first 10 rows.
------------------------
RowID   |   Sales   |   Profit   |   Profit_Percentage
------------------------------------------------------
1       |   261.96  |   41.91    |   16%
2       |   731.94  |   219.58   |   30%
3       |   14.62   |   6.87     |   47%
4       |   957.58  |   -383.03  |   -40%
5       |   22.37   |   2.52     |   11%
6       |   48.86   |   14.17    |   29%
7       |   7.28    |   1.97     |   27%
8       |   907.15  |   90.72    |   10%
9       |   18.50   |   5.78     |   31%
10      |   114.90  |   34.47    |   30%
------------------------------------------------------


4.
------------------------
Profitable Categories
------------------------

-- Find the most profitable product categories based on total profit

SELECT
    Category,
    SubCategory,
    CONCAT('$', FORMAT(ROUND(SUM(Sales), 0), 1)) AS TotalSales,
    COUNT(Quantity) AS TotalQuantity
FROM superstore_dataset
GROUP BY SubCategory, Category
ORDER BY Category ASC

------------------------

Explanation:
- This query identifies the most profitable product categories by calculating the total sales and the total quantity of products sold for each subcategory within a category.
- The result includes columns for SubCategory, Category, TotalSales (formatted as currency), and TotalQuantity.
- Data is grouped by SubCategory and Category to calculate aggregate values.
- The results are sorted in ascending order by Category to present a clear view of profitable categories.

------------------------
Result-Set
------------------------
Category         | SubCategory        | TotalSales   | TotalQuantity
---------------------------------------------------------------
Furniture        | Bookcases          | $114,880.0    | 228
Furniture        | Chairs             | $328,449.0    | 617
Furniture        | Tables             | $206,966.0    | 319
Furniture        | Furnishings        | $82,752.0     | 910
Office Supplies  | Labels             | $12,486.0     | 364
Office Supplies  | Storage            | $216,803.0    | 821
Office Supplies  | Art                | $27,119.0     | 796
Office Supplies  | Binders            | $199,906.0    | 1,433
Office Supplies  | Appliances         | $107,532.0    | 466
Office Supplies  | Paper              | $75,356.0     | 1,267
Office Supplies  | Envelopes          | $15,339.0     | 246
Office Supplies  | Fasteners          | $3,009.0      | 212
Office Supplies  | Supplies           | $45,952.0     | 176
Technology       | Phones             | $327,230.0    | 867
Technology       | Accessories        | $167,380.0    | 775
Technology       | Machines           | $189,239.0    | 115
Technology       | Copiers            | $149,528.0    | 68

---------------------------------------------------------------




While learning PARTITION:

--Show how many sales have been made from each state. (More Advanced)
SELECT
      DISTINCT CustomerName,
      COUNT(OrderID) OVER(
	    PARTITION BY CustomerName
      ) AS TotalOrders
FROM superstore_dataset

/*Gather the city, customer's name, sale amount, a row number for each customer within their city based on descending sales, 
and a cumulative average of sales for each customer within their city, calculated in descending order. Clean up the data aswell. (More Advanced)

SELECT
    City,
    CustomerName,
    CONCAT('$',ROUND(Sales,2)) AS Sales,
    ROW_NUMBER() OVER (
		PARTITION BY City
        ORDER BY Sales DESC
	) AS RowNumber,
    CONCAT('$',ROUND(AVG(Sales) OVER (
		PARTITION BY City
        ORDER BY Sales DESC ROWS UNBOUNDED PRECEDING
	),2)) AS CumulativeAVG
FROM superstore_dataset

















