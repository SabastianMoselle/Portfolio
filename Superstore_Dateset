--This file shows a resultset with over +9000 rows of data
--RDBMS used: MySQL
--Dataset location: https://www.kaggle.com/datasets/vivek468/superstore-dataset-final

--Create table for import
CREATE TABLE superstore_dataset (
	RowID INT PRIMARY KEY,
    OrderID VARCHAR(20),
    OrderDate VARCHAR(20),
    ShipDate VARCHAR(20),
    ShipMode TEXT,
    CustomerID VARCHAR(10),
    CustomerName TEXT,
    CustomerType TEXT,
    Country TEXT,
    City TEXT,
    State TEXT,
    PostalCode INT,
    Region TEXT,
    ProductID VARCHAR(30),
    Category TEXT,
    SubCategory TEXT,
    ProductName VARCHAR(100),
    Sales DECIMAL(10,2),
    Quantity INT,
    Discount DECIMAL(10,2),
    Profit DECIMAL(10,2)
    )

--Find the top 10 customers with the highest profit margin gained by the store?
SELECT
	CustomerName,
    SUM(Profit) AS TotalProfit
FROM superstore_dataset
GROUP BY CustomerName
ORDER BY TotalProfit DESC
LIMIT 10

--Find the longest time between the OrderDate and the ShipDate.
SELECT
      MIN(DATEDIFF(OrderDate, ShipDate)) AS Max_Between_OrderAndShip
FROM superstore_dataset

--Determine which shipping mode is used most frequently.
SELECT
	ShipMode,
    COUNT(ShipMode)
FROM superstore_dataset
GROUP BY ShipMode

	OR

SELECT
	MAX(ShipMode)
FROM superstore_dataset

--Calculate the average order quantity and provide insights into the distribution of order quantities.
SELECT
    Category,
    SubCategory,
    AVG(Quantity)
FROM superstore_dataset
GROUP BY Category, SubCategory

--Show how many sales have been made from each state. (More Advanced)
SELECT
      DISTINCT CustomerName,
      COUNT(OrderID) OVER(
	    PARTITION BY CustomerName
      ) AS TotalOrders
FROM superstore_dataset

/*Gather the city, customer's name, sale amount, a row number for each customer within their city based on descending sales, 
and a cumulative average of sales for each customer within their city, calculated in descending order. Clean up the data aswell. (More Advanced)

SELECT
    City,
    CustomerName,
    CONCAT('$',ROUND(Sales,2)) AS Sales,
    ROW_NUMBER() OVER (
		PARTITION BY City
        ORDER BY Sales DESC
	) AS RowNumber,
    CONCAT('$',ROUND(AVG(Sales) OVER (
		PARTITION BY City
        ORDER BY Sales DESC ROWS UNBOUNDED PRECEDING
	),2)) AS CumulativeAVG
FROM superstore_dataset

--Determine the Profit percentage for each order by calculating.
SELECT
    RowID,
    Sales,
    Profit,
    ROUND((Profit/Sales)*100,2) AS Profit_Percentage
FROM superstore_dataset

--Get the average Profit for orders with a Discount greater than 0.15.
SELECT
    (AVG(Profit)
FROM (
	SELECT
	    Profit
	FROM superstore_dataset
	WHERE Discount >= 0.15
) AS Table1


--Retrieve orders that have a ShipDate later than the corresponding OrderDate. 
SELECT
    OrderID
FROM superstore_dataset
WHERE OrderDate<>ShipDate

--Find orders that were shipped on weekdays (Monday to Friday).
SELECT
	OrderID,
    ShipDate,
    DAYNAME(ShipDate)
FROM superstore_dataset
WHERE DAYNAME(ShipDate) <> 'Saturday' AND DAYNAME(ShipDate) <>'Sunday'
ORDER BY ShipDate ASC

       --OR

SELECT
	OrderID,
    ShipDate,
    DAYNAME(ShipDate)
FROM superstore_dataset
WHERE DAYNAME(ShipDate) NOT BETWEEN 'Saturday' AND 'Sunday'
ORDER BY ShipDate ASC



--Retrieve the orders that were only placed in 2017. (I will be showing multiple queries that extract the same information)
SELECT
	OrderID,
    CustomerName,
    OrderDate,
    ShipDate
FROM superstore_dataset
HAVING YEAR(OrderDate) ='2017'
ORDER BY OrderDate ASC

       --OR

SELECT
	OrderID,
    CustomerName,
    OrderDate,
    ShipDate
FROM superstore_dataset
WHERE OrderDate IN (
	SELECT
		OrderDate
	FROM superstore_dataset
    WHERE OrderDate BETWEEN '2017-01-01' AND '2017-12-31'
	)
ORDER BY OrderDate ASC

       --OR

SELECT
	OrderID,
    CustomerName,
    OrderDate,
    ShipDate
FROM superstore_dataset
WHERE OrderDate BETWEEN '2017-01-01' AND '2017-12-31'
ORDER BY OrderDate ASC


















