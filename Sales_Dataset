--This file shows a table with over +30000 rows of data
--RDBMS used: MySQL
--Dataset location: https://www.kaggle.com

------------------------
Create Table for import
------------------------

CREATE TABLE sales_data (
    IndexNumber INT,
    PRIMARY KEY (IndexNumber),
    Date VARCHAR(20),
    Year YEAR,
    Month VARCHAR(10),
    CustomerAge TINYINT,
    CustomerGender SET('M', 'F'),
    Country VARCHAR(15),
    State VARCHAR(15),
    ProductCategory VARCHAR(20),
    SubCategory VARCHAR(20),
    Quantity TINYINT,
    UnitCost DECIMAL(10, 2),
    UnitPrice DECIMAL(10, 2),
    Cost DECIMAL(10,2),
    Revenue DECIMAL(10,2)
)

1.
--------------------------------------
Quantity Per Month and Across Months
--------------------------------------

--Calculate the total Quantity for each Month, and also calculate the running total Quantity across months.

SELECT DISTINCT -- Using 'DISTINCT' as a duplicate filter
	M_Table.Month,
	C_Table.CumulativeMonthlyQuantity,
    M_Table.Sum_Per_Month
FROM (
	SELECT
		Month,
        SUM(Quantity) AS Sum_Per_Month
	FROM sales_data
    GROUP BY Month
) AS M_Table
-- M_Table is used for calculating the Quantity Sum of each Month

JOIN (
	SELECT DISTINCT
		Month,
		SUM(Quantity) OVER (ORDER BY Date) AS CumulativeMonthlyQuantity
        -- Can change the 'Date' to 'Month' to shorten the amount of rows returned
	FROM sales_data
) AS C_Table
	ON C_Table.Month = M_Table.Month
-- C_Table is used for calculating the Quantity Cumulative Sum for each Distinct Month

WHERE M_Table.Month = 'January'
ORDER BY C_Table.CumulativeMonthlyQuantity ASC
--------------------------------------

Explanation:
- This query categorizes the total monthly quantity along with calculating the running total quantity across months from the "sales_data" .
- The query uses multiple derived tables to calculate the monthly sum of quantities and calculates the running total quantity.
- The "Month" column is joined with itself.
- The "DISTINCT" statement is used to prevent duplicates from being in the result-set.

Only showing the month January due to the size of the result-set when including all months.
-------------------------------------------------
Result-Set
-------------------------------------------------
Month     | MonthlyRunningTotal | TotalPerMonth
-------------------------------------------------
January   |         12          |     5408
January   |         132         |     5408
January   |         139         |     5408
January   |         383         |     5408
January   |         391         |     5408
January   |         577         |     5408
January   |         587         |     5408
January   |         696         |     5408
January   |         714         |     5408
January   |         816         |     5408
January   |         823         |     5408
January   |         1008        |     5408
January   |         1017        |     5408
January   |         1196        |     5408
January   |         1207        |     5408
January   |         1383        |     5408
January   |         1394        |     5408
January   |         1500        |     5408
January   |         1507        |     5408
January   |         1728        |     5408
January   |         1732        |     5408
January   |         1880        |     5408
January   |         1888        |     5408
January   |         2059        |     5408
January   |         2068        |     5408
January   |         2341        |     5408
January   |         2345        |     5408
January   |         2481        |     5408
January   |         2489        |     5408
January   |         2646        |     5408
January   |         2657        |     5408
January   |         2801        |     5408
January   |         2815        |     5408
January   |         2981        |     5408
January   |         2986        |     5408
January   |         3159        |     5408
January   |         3164        |     5408
January   |         3327        |     5408
January   |         3331        |     5408
January   |         3502        |     5408
January   |         3505        |     5408
January   |         3742        |     5408
January   |         3751        |     5408
January   |         3915        |     5408
January   |         3920        |     5408
January   |         4068        |     5408
January   |         4075        |     5408
January   |         4249        |     5408
January   |         4257        |     5408
January   |         4401        |     5408
January   |         4407        |     5408
January   |         4532        |     5408
January   |         4536        |     5408
January   |         4673        |     5408
January   |         4837        |     5408
January   |         4850        |     5408
January   |         5015        |     5408
January   |         5025        |     5408
January   |         5235        |     5408
January   |         5247        |     5408
January   |         5408        |     5408
-------------------------------------------------



2.
--------------------------------------------------------------------------
Average UnitPrice for Each ProductCategory and Overall ProductCategory
--------------------------------------------------------------------------

SELECT DISTINCT -- Using 'DISTINCT' to get the same result if I used 'GROUP BY'
    PC_Table.ProductCategory,
    PC_Table.AvgUnitPricePer,
    AVG(UnitPrice) OVER () AS OverallAvgUnitPrice
FROM sales_data

JOIN (
	SELECT
	     ProductCategory,
	     AVG(UnitPrice) AS AvgUnitPricePer
	FROM sales_data
	GROUP BY ProductCategory
) AS PC_Table
--------------------------------------------------------------------------

Explanation:
- This query calcuates the average unit price for each product category and the overall average unit price for the product category.
- The JOIN derived table is calculating the average unit price for each product category.
- The "DISTINCT" statement is acting as the "GROUP BY" for this result-set.

---------------------------------------------------------
Result-Set
---------------------------------------------------------
Category     | AvgUnitPricePer | OverallAvgUnitPrice
---------------------------------------------------------
Accessories  |    198.723353   |     385.514862
Clothing     |    397.165592   |     385.514862
Bikes        |    972.874239   |     385.514862
---------------------------------------------------------



3.
----------------------------------------------------
Customer Age Difference From Previous Customer
----------------------------------------------------

-- Calculate the difference in CustomerAge between each row and the next row

SELECT
    CustomerAge,
    LEAD(CustomerAge) OVER (ORDER BY Date),
    ABS((CustomerAge - LEAD(CustomerAge) OVER (ORDER BY Date))) AS AgeDifference
FROM sales_data
LIMIT 100
----------------------------------------------------

Explanation:
- This query calculates the age difference between a current customer and a previous customer.
- The CustomerAge window function is ordered by Date.
- The ABS() function is being used to remove any negative signs in the result set.

-----------------------------------------------------------
Reselt-Set
-----------------------------------------------------------
    CustomerAge      |   LeadingAge  |  AgeDifference
---------------------|---------------|---------------------
         37          |      19       |        18
         19          |      29       |        10
         29          |      29       |         0
         29          |      53       |        24
         53          |      36       |        17
         36          |      47       |        11
         47          |      30       |        17
         30          |      42       |        12
         42          |      24       |        18
         24          |      22       |         2
         22          |      37       |        15
         37          |      47       |        10
         47          |      30       |        17
         30          |      19       |        11
         19          |      19       |         0
         19          |      40       |        21
         40          |      41       |         1
         41          |      41       |         0
         41          |      37       |         4
         37          |      37       |         0
         37          |      42       |         5
         42          |      42       |         0
         42          |      49       |         7
         49          |      49       |         0
         49          |      43       |         6
         43          |      21       |        22
         21          |      17       |         4
         17          |      30       |        13
         30          |      52       |        22
         52          |      30       |        22
         30          |      30       |         0
         30          |      52       |        22
         52          |      52       |         0
         52          |      35       |        17
         35          |      43       |         8
         43          |      35       |         8
         35          |      39       |         4
         39          |      31       |         8
         31          |      30       |         1
         30          |      30       |         0
         30          |      24       |         6
         24          |      22       |         2
         22          |      21       |         1
         21          |      49       |        28
         49          |      31       |        18
         31          |      24       |         7
         24          |      24       |         0
         24          |      33       |         9
         33          |      20       |        13
         20          |      31       |        11
         31          |      31       |         0
         31          |      43       |        12
         43          |      33       |        10
         33          |      40       |         7
         40          |      40       |         0
         40          |      22       |        18
         22          |      28       |         6
         28          |      22       |         6
         22          |      20       |         2
         20          |      37       |        17
         37          |      26       |        11
         26          |      31       |         5
         31          |      35       |         4
         35          |      27       |         8
         27          |      29       |         2
         29          |      38       |         9
         38          |      30       |         8
         30          |      32       |         2
         32          |      30       |         2
         30          |      31       |         1
         31          |      53       |        22
         53          |      31       |        22
         31          |      31       |         0
         31          |      38       |         7
         38          |      34       |         4
         34          |      56       |        22
         56          |      32       |        24
         32          |      43       |        11
         43          |      27       |        16
         27          |      34       |         7
         34          |      20       |        14
         20          |      44       |        24
         44          |      44       |         0
         44          |      43       |         1
         43          |      44       |         1
         44          |      29       |        15
         29          |      37       |         8
         37          |      53       |        16
         53          |      24       |        29
         24          |      53       |        29
         53          |      41       |        12
         41          |      23       |        18
         23          |      59       |        36
         59          |      22       |        37
         22          |      59       |        37
         59          |      23       |        36
         23          |      41       |        18
         41          |      28       |        13
         28          |      23       |         5
         23          |      59       |        36
-----------------------------------------------------------











































